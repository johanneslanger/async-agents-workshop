AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 900
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    OpenApiVersion: 3.0.1
    # Cors: '*'

Parameters:
  ApprovalEmail:
    Type: String
    Description: Email address for approval notifications
    Default: talhachattha+strands@gmail.com
  PublishAPIEndpoint:
    Type: String
    Description: API endpoint for publishing the post
    Default: https://08pzccde2k.execute-api.us-east-1.amazonaws.com/prod/posts  # Replace with your actual API endpoint

Resources:
  # Following resources will be created
  # DynamoDB Table for Agent Memory Store with session_id as primary key
  # SNS for sending out emails for approval
  # SQS for sending out tasks to the agent whether net new or tool result of existing ones
  # API Gateway for handling approve or deny from the user
  # Lambda function to be triggered by API Gateway and creating task in SQS
  # Lambda function for Agent implementation which gets triggered by the SQS

  # ------------------------------------
  # DynamoDB Table: Agent Memory Store
  AgentMemoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: agent-memory-store
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
  # ------------------------------------
  # SNS Topic: Approval Notifications
  ApprovalNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: approval-notifications
      DisplayName: Agent Approval Notifications
  

  # SNS Subscription: Email Notifications
  ApprovalEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref ApprovalNotificationTopic
      Endpoint: !Ref ApprovalEmail
  # ------------------------------------
  # SQS Queue: Post Generator Agent Tasks
  PostGeneratorAgentTaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: post-generator-agent-tasks
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20 # Enable long polling
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PostGeneratorAgentTaskQueueDeadLetter.Arn
        maxReceiveCount: 3
  
  # Dead Letter Queue: Agent Task Queue
  PostGeneratorAgentTaskQueueDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: post-generator-agent-tasks-dead-letter-queue
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600 # 14 days

  # SQS Queue: Evaluator Agent Task Queue
  EvaluatorAgentTaskQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: evaluator-agent-tasks
      VisibilityTimeout: 900
      MessageRetentionPeriod: 1209600 # 14 days
      ReceiveMessageWaitTimeSeconds: 20 # Enable long polling
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EvaluatorAgentTaskQueueDeadLetter.Arn
        maxReceiveCount: 3
  
  # Dead Letter Queue: Agent Task Queue
  EvaluatorAgentTaskQueueDeadLetter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: evaluator-agent-tasks-dead-letter-queue
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600 # 14 days
  # ------------------------------------
  ApprovalApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: approval-api
      Description: API for handling approval/denial responses
      EndpointConfiguration:
        Type: REGIONAL
      StageName: dev

  StrandsLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.11
      BuildArchitecture: arm64
    Properties:
      LayerName: strands-agents-dependencies
      Description: Dependencies containing implementation for strands agents
      ContentUri: layers/strands/
      CompatibleRuntimes:
        - python3.11
      CompatibleArchitectures:
        - arm64
      LicenseInfo: MIT
      RetentionPolicy: Retain

  ApprovalHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/approval_handler/
      Handler: index.lambda_handler
      Runtime: python3.11
      Architectures:
      - arm64
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref PostGeneratorAgentTaskQueue
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PostGeneratorAgentTaskQueue.QueueName
      Events:
        ApproveEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApprovalApi
            Path: /approval/approve/{session_id}
            Method: get
            RequestParameters:
              - method.request.querystring.toolUseId:
                  Required: true
        DenyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApprovalApi
            Path: /approval/deny/{session_id}
            Method: get
            RequestParameters:
              - method.request.querystring.toolUseId:
                  Required: true
  
  PostGeneratorAgent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/post_generator_agent/
      Handler: index.lambda_handler
      Runtime: python3.11
      Layers:
      - !Ref StrandsLayer
      Architectures:
      - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        # SQS permissions to write to the queue of other agents as well poll from it's own queue
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EvaluatorAgentTaskQueue.QueueName
        - SQSPollerPolicy:
            QueueName: !GetAtt PostGeneratorAgentTaskQueue.QueueName

        # DynamoDB permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref AgentMemoryTable
        
        # SNS permissions
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ApprovalNotificationTopic.TopicName
        
        # Bedrock permissions
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'bedrock:InvokeModel'
                - 'bedrock:InvokeModelWithResponseStream'
              Resource: '*'  # You can restrict to specific models if needed
      
      Environment:
        Variables:
          MEMORY_TABLE: !Ref AgentMemoryTable
          TOPIC_ARN: !Ref ApprovalNotificationTopic
          APPROVAL_API_ENDPOINT: !Sub "https://${ApprovalApi}.execute-api.${AWS::Region}.amazonaws.com/dev/approval/"
          CALLBACK_SQS_URL: !Ref PostGeneratorAgentTaskQueue
          EVALUATOR_AGENT_SQS_URL: !Ref EvaluatorAgentTaskQueue
          PUBLISH_API_ENDPOINT: !Ref PublishAPIEndpoint
      
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PostGeneratorAgentTaskQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 0
            FunctionResponseTypes:
              - ReportBatchItemFailures
  EvaluatorAgent:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/evaluator_agent/
      Handler: index.lambda_handler
      Runtime: python3.11
      Layers:
      - !Ref StrandsLayer
      Architectures:
      - arm64
      Policies:
        - AWSLambdaBasicExecutionRole
        # SQS permissions to write to the queue of other agents as well poll from it's own queue
        - SQSSendMessagePolicy:
            QueueName: !GetAtt PostGeneratorAgentTaskQueue.QueueName
        - SQSPollerPolicy:
            QueueName: !GetAtt EvaluatorAgentTaskQueue.QueueName

        # DynamoDB permissions
        - DynamoDBCrudPolicy:
            TableName: !Ref AgentMemoryTable
        
        # Bedrock permissions
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'bedrock:InvokeModel'
                - 'bedrock:InvokeModelWithResponseStream'
              Resource: '*'  # You can restrict to specific models if needed
      
      Environment:
        Variables:
          MEMORY_TABLE: !Ref AgentMemoryTable
          CALLBACK_SQS_URL: !Ref EvaluatorAgentTaskQueue
          POST_GENERATOR_AGENT_SQS_URL: !Ref PostGeneratorAgentTaskQueue
      
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PostGeneratorAgentTaskQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 0
            FunctionResponseTypes:
              - ReportBatchItemFailures



Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref AgentMemoryTable
    Export:
      Name: !Sub "${AWS::StackName}-agent-memory-table"
  PostGeneratorAgentSQSQueueUrl:
    Description: "SQS Queue URL"
    Value: !Ref PostGeneratorAgentTaskQueue
    Export:
      Name: !Sub "${AWS::StackName}-agent-task-queue-url"
  PostGeneratorAgentSQSQueueArn:
    Description: ARN of the SQS queue for post generator agent tasks
    Value: !GetAtt PostGeneratorAgentTaskQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-agent-task-queue-arn"
  SNSTopicArn:
    Description: ARN of the SNS topic for approval notifications
    Value: !Ref ApprovalNotificationTopic
    Export:
      Name: !Sub "${AWS::StackName}-approval-topic-arn"
  ApprovalApi:
    Description: API Gateway endpoint URL for approval/denial responses
    Value: !Sub "https://${ApprovalApi}.execute-api.${AWS::Region}.amazonaws.com/dev/approval/"
    Export:
      Name: !Sub "${AWS::StackName}-approval-api"
  ApprovalHandlerFunction:
    Description: Approval Handler Lambda function ARN
    Value: !GetAtt ApprovalHandlerFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-approval-handler-lambda"
  PostGeneratorAgent:
    Description: Agent Handler Lambda function ARN
    Value: !GetAtt PostGeneratorAgent.Arn
    Export:
      Name: !Sub "${AWS::StackName}-post-generator-agent"
  ApprovalHandlerRole:
    Description: Implicit IAM Role created for Approval Handler function
    Value: !GetAtt ApprovalHandlerFunctionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-approval-handler-role"
  PostGeneratorAgentRole:
    Description: Implicit IAM Role created for Agent Handler function
    Value: !GetAtt PostGeneratorAgentRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-post-generator-agent-role"